CS411-01
Bolton Lin
Joshua Cords

=====RESOLVING CONFLICTS=====

After first compilation, bison notifies that there were about 13 S/R conflicts for every state that relied on Expr because we had not implemented operator precedence beforehand.

After putting in operator precedence, we were left to deal with 5 remaining S/R and R/R conflicts.

State 90 conflicts: 1 shift/reduce, 1 reduce/reduce
State 91 conflicts: 1 shift/reduce
State 119 conflicts: 1 shift/reduce
State 195 conflicts: 1 shift/reduce

State 90

   14 Type: _id .
   91 Lvalue: _id .
   94 Call: _id . _leftparen Exprs _rightparen
   95     | _id . _period _id _leftparen Exprs _rightparen
   96     | _id . _leftparen _rightparen
   97     | _id . _period _id _leftparen _rightparen

    _period     shift, and go to state 125
    _leftparen  shift, and go to state 126

    _period       [reduce using rule 91 (Lvalue)]
    _leftbracket  reduce using rule 14 (Type)
    _leftbracket  [reduce using rule 91 (Lvalue)]
    _id           reduce using rule 14 (Type)
    $default      reduce using rule 91 (Lvalue)

State 91

   43 VariableDecls: VariableDecl .
   44              | VariableDecl . VariableDecls

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 5
    _string   shift, and go to state 6
    _id       shift, and go to state 8

    _id       [reduce using rule 43 (VariableDecls)]
    $default  reduce using rule 43 (VariableDecls)

    VariableDecl   go to state 91
    Variable       go to state 12
    Type           go to state 48
    VariableDecls  go to state 127

State 119

   91 Lvalue: _id .
   94 Call: _id . _leftparen Exprs _rightparen
   95     | _id . _period _id _leftparen Exprs _rightparen
   96     | _id . _leftparen _rightparen
   97     | _id . _period _id _leftparen _rightparen

    _period     shift, and go to state 125
    _leftparen  shift, and go to state 126

    _period   [reduce using rule 91 (Lvalue)]
    $default  reduce using rule 91 (Lvalue)

State 195

   56 IfStmt: _if _leftparen Expr _rightparen Stmt .
   57       | _if _leftparen Expr _rightparen Stmt . _else Stmt

    _else  shift, and go to state 205

    _else     [reduce using rule 56 (IfStmt)]
    $default  reduce using rule 56 (IfStmt)

Attempt to reduce conflicts by introducing operator precedence for logical not, unary minus, array indexing, and field selection. This did nothing. The problems were actually in a few rules' left recursion. The following changes were made:

Changing
   91 Lvalue: _id
   92       | Lvalue _leftbracket Expr _rightbracket
   93       | Lvalue _period _id
to
Lvalue		: _id 												{printf("[reduce 92]");}
		| _id Lvalue2											{printf("[reduce 92`]")};
Lvalue2		: _leftbracket Expr _rightbracket 								{printf("[reduce 93]");}
		| _period _id 											{printf("[reduce 94]");}
		| _leftbracket Expr _rightbracket Lvalue2							{printf("[reduce 93`]");}
		| _period _id Lvalue2										{printf("[reduce 94`]");};

Changing
    9 Type: _int
   10     | _double
   11     | _boolean
   12     | _string
   13     | Type _leftbracket _rightbracket
   14     | _id
to
Type 		: _int Type2											{printf("[reduce 9]");}
		| _double Type2 										{printf("[reduce 10]");}
		| _boolean Type2										{printf("[reduce 11]");}
		| _string Type2											{printf("[reduce 12]");}
		| _id Type2											{printf("[reduce 14]");}
 		| _int 												{printf("[reduce 9]");}
		| _double 											{printf("[reduce 10]");}
		| _boolean											{printf("[reduce 11]");}
		| _string											{printf("[reduce 12]");}
		| _id 												{printf("[reduce 14]");};
Type2		: _leftbracket _rightbracket									{printf("[reduce 13]");}
		| _leftbracket _rightbracket Type2

This reduced the amount of S/R and R/R conflicts to 2. The one we decided to tackle was the if-else statement conflict. The problem was that the parser did not know whether to shift or reduce when it would need to read the _else token. So this was the solution, introduce precedence and tell the parser to prefer to shift.

Changing
IfStmt 		: _if _leftparen Expr _rightparen Stmt 								{printf("[reduce 56]");}
		| _if _leftparen Expr _rightparen Stmt _else Stmt 						{printf("[reduce 57]");};
to
%nonassoc THEN
%nonassoc _else
%%
IfStmt 		: _if _leftparen Expr _rightparen Stmt 			%prec THEN				{printf("[reduce 56]");}
		| _if _leftparen Expr _rightparen Stmt _else Stmt 						{printf("[reduce 57]");};

This resolved all S/R and R/R conflicts besides one:

   49 VariableDecls: VariableDecl .
   50              | VariableDecl . VariableDecls

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 5
    _string   shift, and go to state 6
    _id       shift, and go to state 8

    _id       [reduce using rule 49 (VariableDecls)]
    $default  reduce using rule 49 (VariableDecls)

    VariableDecl   go to state 97
    Variable       go to state 12
    Type           go to state 54
    VariableDecls  go to state 135

This conflict is unresolvable without making significant changes to the grammar though. We would have to have an implementation that determined the difference between a Type and an _id... since Type can just simply reduce to an _id.

So we decided to leave this in. 

=====TEST CASE DESIGN=====

First test is the test program given by instructor for Project 1. It is NOT accepted by the parser, because the grammar doesn't allow statements within a ClassDecl without there being a FunctionDecl.

Second test is a modified version of test1 to show that if you enclose the statements inside a function, it does parse correctly.

Third test features nested if statements.

Fourth test features a while statement.
